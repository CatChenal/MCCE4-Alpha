#!/usr/bin/env python
"""
A Tool to convert TORSION parameters from tpl to ftpl format

tpl format:
#-------|-----|----|----|----|----|----|---------|---------|---------|---------|---------|---------|---------|---------|---------
#        CONF  ATOM ATOM ATOM ATOM relx Vn/2(kcal)  n_fold   gamma    Vn/2(kcal)  n_fold   gamma    Vn/2(kcal)  n_fold   gamma
TORSION  NTR    H2   N    CA   C    f      1.400         3      0.00
TORSION  NTR01  H    N    CA   C    f        0.0         2    180.00
TORSION  CTR01  HO   O    C    CA   t      1.800         2    180.00     1.360         1      0.00
TORSION  CTR02  HXT  OXT  C    CA   t      1.800         2    180.00     1.360         1      0.00

ftpl format:
TORSION, NTR,   " H2 ": " N  ", " CA ", " C  ",  (1.400, 3,   0.00)
TORSION, NTR01, " H  ": " N  ", " CA ", " C  ",  (0.0,   2, 180.00)
TORSION, CTR01, " HO ": " O  ", " C  ", " CA ",  (1.800, 2, 180.00), (1.360,  1,  0.00)
TORSION, CTR02, " HXT": " OXT", " C  ", " CA ",  t      1.800         2    180.00     1.360         1      0.00
"""
import math
import sys


class TORS:
    """Internal torsion data structure to hold v2, nfold and gamma"""
    def __init__(self) -> None:
        """
        Construct elements v2, nfold, and gamma for one torsion term
        :return: None
        """
        self.v2 = 0.0
        self.n_fold = 0
        self.gamma = 0.0


class TORSION_param:
    """This class defines the data structure of TORSION parameters."""
    def __init__(self, value_str) -> None:
        """Construct the TORSION parameter and assign initial values from value_str.

        :param value_str: A string read from parameter file that defines the torsion parameter.
        :type value_str: string
        :return: None
        """
        d2r = math.pi/180.0  # cofficient to convert degrees to radians

        self.atom1 = value_str[:4]
        self.atom2 = value_str[5:9]
        self.atom3 = value_str[10:14]
        self.tors_terms = []
        fields = value_str[15:].split()
        relx = fields.pop(0).strip().upper()
        if relx == "F":
            self.relx = False
        else:
            self.relx = True

        n_term = int(len(fields)/3)
        for i in range(n_term):
            tors = TORS()
            tors.v2 = float(fields[i*3+0])
            tors.n_fold = int(fields[i*3+1])
            #tors.gamma = float(fields[i*3+2]) * d2r
            tors.gamma = float(fields[i*3+2])  # write back to ftpl file and keep the radiant value
            self.tors_terms.append(tors)


if __name__ == "__main__":
    fname = sys.argv[1]
    lines = open(fname).readlines()
    for line in lines:
        if line.startswith("TORSION "):
            line = line.split("#")[0].strip()
            if len(line) >= 20:
                key1 = line[:9].strip()
                key2 = line[9:15].strip()
                key3 = line[15:19]
                param_value = TORSION_param(line[20:])
            
                # print out new_key and value in the free tpl format
                newline = "%s, %s, \"%s\": " % (key1, key2, key3) 
                newline += "\"%s\", \"%s\", \"%s\", " % (param_value.atom1, param_value.atom2, param_value.atom3) 
                terms = []
                for term in param_value.tors_terms:
                    terms.append("(%.3f, %d, %.2f)" % (term.v2, term.n_fold, term.gamma))
                newline += ", ".join(terms)
                print(newline)
