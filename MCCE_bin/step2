#!/usr/bin/env python
"""
MCCE4 Step 2. Make conformers, prepare for energy look up table calculation at step 3.
"""
import logging

from mcce4.args import Step2Options
from mcce4.runprm import *
from mcce4.pdbio import *
from mcce4.mcce import *
from mcce4 import __version__
from mcce4.mcce import _step1_out
from mcce4.mcce import _step2_out
from mcce4.mcce import _rot_stat
from mcce4.main import *

newtpl_name = "new"

if __name__ == "__main__":
    print("MCCE4 version: %s\n" % __version__)
    logging.info("Running MCCE4 step 2")
    # 3 key elements for a calculation
    # run.prm - configuration of a run
    # tpl files - parameter files (optional in step 4)
    # input structure - (optional in step 2, 3, and 4)

    # Get runprm
    
    cmd_options = Step2Options()        # get command options
    runprm = RunPrm()                   # create a runprm object and load default values
    runprm.amend_by_cmd(cmd_options)    # load additional runprm per instruction in the command line
    runprm.warn_deprecated()            # warn deprecated entries found in loaded 
    runprm.dump("Step 2 uses the following run parameters:")  # dump the runprm to a file with a comment
  
    
    # Get tpl
    tpl = TPL()
    tpl.read_ftpl_folder(runprm.FTPL_FOLDER.value)
    tpl.dump(fname="ftpl.record")
        
    newftpl_file = "%s.ftpl" % (newtpl_name)        
    if os.path.isfile(newftpl_file):
        tpl.read_ftpl_file(newftpl_file)


    # Here we don't pass structure to MCCE class, make an empty mcce.protein object instead
    mcce = MCCE(prm=runprm, tpl=tpl)
    mcce.convert_to_mccepdb()  # create an empty mcce.protein object
 
    # Load mccepdb to mcce.protein object
    logging.info("Loading structure from %s." % _step1_out)
    mcce.load_mccepdb(_step1_out)

    # Check missing and duplicate atoms in each conformer
    # logging.info("Check missing and duplicate atoms ...")
    # mcce.atom_number_check()

    # Place missing heavy atoms
    logging.info("Place missing heavy atoms ...")
    while True:
        if mcce.place_missing_heavy() == 0:
            break

    # init the rot_stat counter
    rot_stat = ROT_STAT(mcce.protein)

    logging.info("Check rotamer making progress in file %s." % _rot_stat)

    # Count the conformer at start
    rot_stat.count_stat(mcce.protein, step="start")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)
    logging.info("Imported %s to mcce object" % _step1_out)

    # Make swap conformers
    if runprm.ROT_SWAP.value.upper() == "T":
        logging.info("Making swap rotamers by rule ROT_SWAP in ftpl files...")
        mcce.rot_swap()
    rot_stat.count_stat(mcce.protein, step="swap")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)

    logging.info("Make atom conenctivity ...")
    mcce.make_connect12()  # make connect12 every time new conformers are created

    # Make rotate conformers
    if runprm.PACK.value.upper() == "T":
        logging.info("(PACK) flag is True. Making rotamers by rule ROTATE in ftpl files...")
        mcce.rot_rotate()
        logging.info("Removing high energy rotamers ...")
        mcce.clean_hvrot()
    
    rot_stat.count_stat(mcce.protein, step="rotate")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)

    # Make swing conformers
    if runprm.SWING.value.upper() == "T":
        logging.info("(SWING) flag is True. Making swing rotamers by rule ROTATE in ftpl files...")
        mcce.rot_swing()
        logging.info("Removing high energy rotamers ...")
        mcce.clean_hvrot()
    rot_stat.count_stat(mcce.protein, step="swing")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)


    # Repack rotamers
    if runprm.PACK.value.upper() == "T" or runprm.SWING.value.upper() == "T":
        logging.info("Repacking rotamers ...")
        mcce.protein.serialize()
        mcce.rot_repack()
    rot_stat.count_stat(mcce.protein, step="repack")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)

    # H directed rotamer making
    if runprm.HDIRECTED.value.upper() == "T":
        logging.info("(HDIRECTED) flag is True. Making hydrogen bond directed rotamers ...")
        mcce.protein.serialize()
        mcce.rot_hdirected()
    rot_stat.count_stat(mcce.protein, step="hbond")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)

    # Most exposed conformer making
    logging.info("Making the most exposed confomers for surface residues ...")
    mcce.rot_xposed()
    rot_stat.count_stat(mcce.protein, step="xposed")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)


    # Ionization, make conformers by CONFLIST confTypes
    logging.info("Making confomers based on confType with CONFLIST paramters ...")
    mcce.rot_ionization()
    # Place missing heavy atoms
    logging.info("   Place missing heavy atoms ...")
    while True:
        if mcce.place_missing_heavy() == 0:
            break
    rot_stat.count_stat(mcce.protein, step="ioni")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)


    # Place H atoms
    logging.info("Placing H atoms based on CONNECT rule in ftpl files ...")
    mcce.place_h()
    rot_stat.count_stat(mcce.protein, step="torh")
    lines = rot_stat.write_stat(mcce.protein)
    open(_rot_stat, "w").writelines(lines)


    logging.info("Save mccepdb to file %s" % _step2_out)
    mcce.protein.dump(_step2_out)



