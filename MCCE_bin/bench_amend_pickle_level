#!/usr/bin/env python

"""
Tool file: bench_amend_pickle_level

Ad hoc tool to change the conformer-making level value in the 
pickled cli args file created by bench_setup.
"""

from argparse import Namespace
import shutil
from mcce4.mcce_benchmark import FILES, io_utils as iou


def main():
    PKL = FILES.CLI_ARGS_PKL.value
    pkl_fp = iou.Path(PKL)
    if not pkl_fp.exists():
        print(f"Not found: {PKL!r}. Call this tool where the file resides.")
        return

    ans = input("Provide the integer of the new conformer-making level.\nChoices are 1, 2, or 3: ")
    try:
        new_lev = int(ans.strip())
    except TypeError:
        print(f"Could not read input into an integer; given: {ans}")
        return
    
    if new_lev not in [1, 2, 3]:
        print(f"Unknown level: {new_lev}; choices are 1, 2, or 3. Exiting.")
        return

    print("Creating backup copy")
    # Create a backup copy. Even if not needed, it will indicate the original was amended.
    bkp_fp = iou.Path(pkl_fp.name + ".bkp")
    shutil.copy(pkl_fp, bkp_fp)

    # Open the argparse.Namespace into a dict:
    pkl_d = vars(iou.from_pickle(pkl_fp))

    # Maybe update conf_making_level number:
    old_lev = int(pkl_d["conf_making_level"])
    print(f"Old level: {old_lev} means {iou.levels2names[old_lev]}.")
    if old_lev == new_lev:
        print("Same levels, no change. Done.")
        return
    
    pkl_d["conf_making_level"] = new_lev
    print(f"New level: {new_lev} means {iou.levels2names[new_lev]}.")
    # Re-serialized to the same data type as the original:
    iou.to_pickle(Namespace(**pkl_d), pkl_fp)

    print("The file has been saved. It will be used by bench_analyze if re-run.")


if __name__ == "__main__":
    main()
