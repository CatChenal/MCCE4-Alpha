#!/usr/bin/env python

"""
Tool file: multiconf_residues

Given the path to a step2_out.pdb file, save the list of
residues with multiple conformers to file in the same directory."
"""

import argparse
import pandas as pd
from pathlib import Path
import sys
from mcce4.mcce_benchmark import FILES
from mcce4.mcce_benchmark.cli_utils import arg_valid_dirpath


def get_multiconf_res(s2fp: Path):
    """Given the path to a step2_out.pdb file save the list of
    residues with multiple conformers to file in the same directory.
    """
    s2df = pd.read_fwf(s2fp, header=None)

    gly = s2df[s2df[3]=="GLY"][4]
    n_gly = gly.unique().size

    # exclude bkb confs
    msk = s2df[10].str.startswith("BK")
    s2df = s2df[~msk]

    uniqres = s2df[3].unique()
    res_count = s2df[4].str[1:5].astype(int).max()
    ter = (uniqres[0] == "NTR") * 2
    tot_res = res_count + ter

    s2df["resconf"] = s2df[3] + "_" + s2df[4]
    aver_cpr = round(s2df["resconf"].unique().size / res_count)
    print(f"Mean conformers/res: {aver_cpr}")

    uniqdf = pd.DataFrame(s2df["resconf"].unique(), columns=["res"])
    uniqdf_count = uniqdf.res.str[:-4].value_counts()

    tot_recombined = uniqdf_count.shape[0] + n_gly
    print((f"Check non-bkb count + glycines: {tot_recombined} == "
           f"res + ter: {tot_res} ? {tot_recombined == tot_res}"
           )
    )
    multiconfs = uniqdf_count[uniqdf_count>1]
    multiconfs = multiconfs.reset_index()
    multiconfs.columns = ["res", "confs"]
    multiconfs.set_index(multiconfs.res.str[-4:].astype(int), inplace=True)
    pdbid = s2fp.parent.stem
    multiconfs.index.name = pdbid
    
    data = multiconfs.to_string()+"\n"
    fp = s2fp.parent.joinpath(FILES.MULTICONF_RES.value)
    fp.write_text(data)
    print("Data saved to ", str(fp), ":\n", data)

    return


def main(argv=None):

    p = argparse.ArgumentParser(description="""Given the path to a step2_out.pdb file save the list of
    residues with multiple conformers to file in the same directory.
    """)
    p.add_argument("s2dir", metavar="path/to/step2_out.pdb/parent",
                   type=arg_valid_dirpath,
                   help="The directory where step2_out.pdb resides.")

    args = p.parse_args(argv)
    save_to = Path(args.s2dir)
    s2fp = save_to.joinpath("step2_out.pdb")
    if not s2fp.exists():
        print("step2_out.pdb not found in ", str(save_to))
        return
    get_multiconf_res(s2fp)

    return


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
