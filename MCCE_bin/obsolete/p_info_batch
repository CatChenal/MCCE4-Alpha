#!/usr/bin/env python
import os
import sys
import subprocess
from pathlib import Path
import shutil


def get_pdb_files(input_path):
    pdb_files = []
    path = Path(input_path)
    if path.is_dir():
        pdb_files = list(path.glob("*.pdb"))
    elif path.is_file() and path.suffix == ".txt":
        with open(path, "r") as f:
            for line in f:
                file_path = Path(line.strip())
                if file_path.exists() and file_path.suffix == ".pdb":
                    pdb_files.append(file_path)
    else:
        print("Invalid input: must be a directory or a .txt file.")
        sys.exit(1)
    return pdb_files


def process_pdb_file(pdb_file):
    base_name = pdb_file.stem
    dir_name = Path(base_name)
    dir_name.mkdir(exist_ok=True)

    dest_pdb = dir_name / pdb_file.name
    shutil.copy(pdb_file, dest_pdb)

    log_file = dir_name / "p_info.log"
    with open(log_file, "w") as log:
        try:
            subprocess.run(
                ["p_info", pdb_file.name],
                cwd=dir_name,
                stdout=log,
                stderr=subprocess.STDOUT,
                check=True,
            )
        except subprocess.CalledProcessError as e:
            print(f"Error running p_info on {pdb_file.name}: see {log_file}")


def main():

    if len(sys.argv) != 2:
        print("Usage: p_info_batch.py <directory_or_filelist.txt>")
        sys.exit(1)

    input_path = sys.argv[1]
    pdb_files = get_pdb_files(input_path)

    if not pdb_files:
        print("No valid PDB files found.")
        sys.exit(1)

    for pdb_file in pdb_files:
        print(f"Processing {pdb_file}...")
        process_pdb_file(pdb_file)


if __name__ == "__main__":
    main()
